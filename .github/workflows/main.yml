# Nombre del workflow que aparecerá en la pestaña "Actions" de GitHub
name: Build Android APK

# Cuándo se debe ejecutar este workflow
on:
  # Se ejecuta cuando haces un push a las ramas main o master
  push:
    branches: [ main, master ]
  # También se ejecuta cuando se crea un Pull Request hacia esas ramas
  pull_request:
    branches: [ main, master ]

# Los trabajos (jobs) que se van a ejecutar
jobs:
  # Definimos un único trabajo llamado "build"
  build:
    # Se ejecutará en una máquina virtual con la última versión de Ubuntu
    runs-on: ubuntu-latest

    # Los pasos (steps) que seguirá el trabajo
    steps:
    # 1. Descarga tu código del repositorio a la máquina virtual
    - name: Checkout repository
      uses: actions/checkout@v3

    # 2. Configura el entorno de Java (JDK 17) necesario para Android
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin' # 'temurin' es una distribución común y recomendada

    # 3. Configura el caché para Gradle para que las compilaciones futuras sean más rápidas
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    # 4. Da permisos de ejecución al script de Gradle (necesario en Linux)
    - name: Grant execute permission for gradlew
      run: chmod +x ./gradlew

    # 5. Ejecuta el comando para compilar el APK de depuración (debug)
    - name: Build with Gradle
      run: ./gradlew assembleDebug

    # 6. Sube el APK generado como un "artefacto" para que puedas descargarlo
    - name: Upload APK
      uses: actions/upload-artifact@v3
      with:
        # Nombre que tendrá el archivo descargable
        name: app-debug-apk
        # Ruta donde se encuentra el APK generado
        path: app/build/outputs/apk/debug/app-debug.apk
